apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: liquibase-pipeline
spec:
  params:
    - name: git-url
      type: string
      description: Git url to clone
    - name: git-revision
      type: string
      description: Git revision to clone
    - name: git-ref-type
      type: string
      description: Git reference type -> branch or tag
    - name: jdbc-database-secret
      type: string
      description: Secret path for JDBC Database Config
    - name: root-changelog-file
      type: string
      description: Root Changelog filepath
    - name: environment
      type: string
      description: Environment to deploy
  workspaces:
    - name: git-source
  tasks:
    # Git clone repo
    - name: fetch-from-git
      taskRef:
        name: git-clone
      params:
       - name: url
         value: $(params.git-url)
       - name: revision
         value: $(params.git-revision)
      workspaces:
       - name: output
         workspace: git-source
    # Liquibase validate
    - name: liquibase-validate
      runAfter:
        - fetch-from-git
      taskRef:
        name: liquibase-validate
      params:
       - name: jdbc-database-secret
         value: $(params.jdbc-database-secret)
       - name: root-changelog-file
         value: $(params.root-changelog-file)
      workspaces:
       - name: source
         workspace: git-source
    # Liquibase status
    - name: liquibase-status
      runAfter:
        - liquibase-validate
      taskRef:
        name: liquibase-status
      params:
       - name: jdbc-database-secret
         value: $(params.jdbc-database-secret)
       - name: root-changelog-file
         value: $(params.root-changelog-file)
      workspaces:
       - name: source
         workspace: git-source
    # Liquibase sanpshot
    - name: liquibase-snapshot
      when:
      - input: "$(tasks.liquibase-status.results.status-message)"
        operator: in
        values: ["no"]
      - input: "$(params.environment)"
        operator: notin
        values: ["prod"]
      taskRef:
        name: liquibase-snapshot
      params:
       - name: jdbc-database-secret
         value: $(params.jdbc-database-secret)
      workspaces:
       - name: source
         workspace: git-source
    # Liquibase updatesql
    - name: liquibase-updatesql
      when:
        - input: "$(tasks.liquibase-status.results.status-message)"
          operator: in
          values: ["no"]
        - input: "$(params.environment)"
          operator: notin
          values: ["prod"]
      taskRef:
        name: liquibase-updatesql
      params:
       - name: jdbc-database-secret
         value: $(params.jdbc-database-secret)
       - name: root-changelog-file
         value: $(params.root-changelog-file)
      workspaces:
       - name: source
         workspace: git-source
    # Liquibase update
    - name: liquibase-update-testing-rollback
      runAfter:
        - liquibase-snapshot
        - liquibase-updatesql
      when:
        - input: "$(tasks.liquibase-status.results.status-message)"
          operator: in
          values: ["no"]
        - input: "$(params.environment)"
          operator: notin
          values: ["prod"]
      taskRef:
        name: liquibase-update-testing-rollback
      params:
       - name: jdbc-database-secret
         value: $(params.jdbc-database-secret)
       - name: root-changelog-file
         value: $(params.root-changelog-file)
      workspaces:
       - name: source
         workspace: git-source
    # Liquibase update
    - name: liquibase-update
      runAfter:
        - liquibase-snapshot
        - liquibase-updatesql
      when:
        - input: "$(tasks.liquibase-status.results.status-message)"
          operator: in
          values: ["no"]
        - input: "$(params.environment)"
          operator: in
          values: ["prod"]
      taskRef:
        name: liquibase-update
      params:
       - name: jdbc-database-secret
         value: $(params.jdbc-database-secret)
       - name: root-changelog-file
         value: $(params.root-changelog-file)
      workspaces:
       - name: source
         workspace: git-source
    # Liquibase diff
    - name: liquibase-diff
      runAfter:
        - liquibase-update-testing-rollback
      when:
        - input: "$(params.environment)"
          operator: notin
          values: ["prod"]
        - input: "$(tasks.liquibase-status.results.status-message)"
          operator: in
          values: ["no"]
      taskRef:
        name: liquibase-diff
      params:
       - name: jdbc-database-secret
         value: $(params.jdbc-database-secret)
      workspaces:
       - name: source
         workspace: git-source
    # Liquibase tag
    - name: liquibase-tag
      runAfter:
        - liquibase-update
      when:
        - input: "$(tasks.liquibase-status.results.status-message)"
          operator: in
          values: ["no"]
        - input: "$(params.environment)"
          operator: in
          values: ["prod"]
        - input: "$(params.git-ref-type)"
          operator: in
          values: ["tag"]
      taskRef:
        name: liquibase-tag
      params:
       - name: jdbc-database-secret
         value: $(params.jdbc-database-secret)
       - name: git-revision
         value: $(params.git-revision)
      workspaces:
       - name: source
         workspace: git-source
